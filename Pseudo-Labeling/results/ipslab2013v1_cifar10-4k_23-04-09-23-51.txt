['/content/drive/.shortcut-targets-by-id/1rq7ZwO6n9Qq8z-u9Ls5ROqESUr9unPFF/AdversarialAI/Pseudo-Labeling', '/content/drive/MyDrive/AdversarialAI/Poisoner', '/env/python', '/usr/lib/python39.zip', '/usr/lib/python3.9', '/usr/lib/python3.9/lib-dynload', '/usr/local/lib/python3.9/dist-packages', '/usr/lib/python3/dist-packages', './']
Namespace(print_freq=20, save_freq=100, save_dir='./checkpoints', dataset='cifar10', workers=4, num_labels=4000, sup_batch_size=64, usp_batch_size=64, data_twice=False, data_idxs=False, label_exclude=None, arch='cnn13', model='ipslab2013v1', drop_ratio=0.0, epochs=400, optim='sgd', momentum=0.9, nesterov=True, weight_decay=0.0005, lr=0.1, lr_scheduler='cos', min_lr=0.0001, steps=None, gamma=None, rampup_length=80, rampdown_length=50, t1=None, t2=None, soft=None, xi=None, eps=None, n_power=None, threshold=None, ema_decay=None, mixup_alpha=None, usp_weight=1.0, weight_rampup=30, ent_weight=None)
pytorch version : 2.0.0+cu118
getting cifar10 | subset size, labeled size, test size = [4500, 400, 1000]
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
labeled, unlabeled, test sizes: [400, 4100, 1000]
malicious: airplane , target: automobile
x_star: <class 'numpy.ndarray'>
x_target: <class 'numpy.ndarray'>
target and malicious images saved to ./data/poison/latest_poison
label_idxsusr/local/lib/python3.9/dist-packages/torch/utils/data/dataloader.py:561: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
/usr/local/lib/python3.9/dist-packages/torch/utils/data/dataloader.py:561: UserWarning: This DataLoader will create 8 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
/usr/local/lib/python3.9/dist-packages/torch/optim/lr_scheduler.py:139: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "

unlab_idxs: [1614, 4454, 298, 3647, 2226, 1104, 1472, 1546, 1324, 1549, 2566, 1464, 4211, 3491, 2965, 132, 587, 4040, 2638, 928, 3689, 3887, 4289, 1595, 2821, 557, 3504, 1784, 2968, 3571, 260, 2376, 4236, 3820, 3944, 3840, 4226, 365, 1590, 2992, 357, 31, 3135, 3378, 1979, 1552, 3415, 4404, 440, 4065, 1485, 3182, 3847, 983, 1731, 2517, 3333, 1235, 4194, 178, 1174, 3114, 277, 1730, 3083, 1328, 3375, 527, 2703, 1740, 3645, 2397, 2799, 3238, 264, 4462, 3914, 3206, 2631, 1915, 3278, 1064, 4011, 908, 2528, 2551, 467, 494, 3291, 2139, 923, 3082, 2988, 1691, 2490, 2155, 4201, 2143, 4272, 1937, 4111, 1479, 2997, 973, 2900, 2421, 1278, 1572, 3403, 155, 1305, 2711, 4132, 3536, 4221, 3744, 1113, 1356, 1025, 1425, 4472, 2387, 3075, 1889, 3740, 4171, 1647, 2243, 3681, 306, 4061, 3837, 1321, 2861, 2668, 1233, 3815, 1945, 2172, 2336, 1372, 274, 2366, 26, 271, 2353, 2791, 883, 2265, 979, 174, 3419, 2664, 104, 839, 2729, 716, 3593, 864, 878, 2503, 134, 3374, 4024, 195, 3320, 1456, 3860, 2708, 3607, 3483, 12, 1367, 521, 2012, 4412, 4058, 993, 3964, 1756, 1909, 4380, 3563, 4400, 3625, 639, 3288, 3350, 3217, 2115, 3725, 2031, 1164, 2136, 3960, 3621, 2830, 1430, 631, 4084, 3599, 2933, 139, 4470, 2531, 4340, 3335, 3989, 3528, 885, 1071, 1859, 3762, 2834, 520, 2626, 3786, 3235, 562, 645, 4389, 2327, 2130, 397, 1560, 4139, 4324, 4020, 256, 3133, 2845, 2580, 2505, 2043, 108, 3674, 3154, 2932, 3746, 2385, 1515, 1361, 73, 4401, 2911, 960, 656, 3057, 2246, 794, 61, 2924, 367, 4345, 2256, 972, 1657, 3477, 1512, 4102, 3729, 247, 595, 3122, 3932, 2341, 1961, 4218, 1207, 2202, 3615, 2921, 3512, 3871, 2200, 766, 1458, 3956, 372, 1270, 4055, 4103, 931, 721, 1785, 2468, 2885, 1006, 3539, 1490, 1470, 79, 2197, 3948, 3896, 1779, 1203, 897, 3054, 4444, 3006, 1970, 2762, 4064, 3, 3274, 3592, 1950, 2669, 1213, 4129, 3954, 225, 2613, 2609, 2446, 2507, 3236, 2573, 2792, 1559, 3379, 4113, 717, 2881, 2274, 2539, 4291, 1342, 3905, 262, 4330, 1297, 1332, 1229, 3493, 4032, 2662, 368, 1905, 1760, 3198, 3310, 2892, 961, 433, 228, 4187, 1511, 985, 2536, 1587, 1322, 4320, 3515, 3836, 1575, 4175, 4119, 4092, 2047, 4259, 3595, 2223, 1413, 3928, 586, 4270, 3636, 4382, 1732, 3701, 3817, 1797, 1024, 113, 351, 755, 3835, 3261, 2589, 2660, 1914, 2916, 1171, 2058, 3158, 2788, 4370, 3665, 669, 1121, 2264, 3648, 3170, 1780, 1643, 3156, 1940, 3433, 123, 1510, 2865, 448, 3033, 743, 2305, 4174, 3462, 3562, 2103, 3916, 2070, 2393, 3755, 3220, 1258, 1468, 4276, 786, 2622, 532, 3754, 3694, 2157, 3406, 1388, 4078, 4205, 1577, 2049, 640, 1077, 3089, 2557, 1026, 873, 2969, 3523, 4297, 4348, 3888, 2953, 3580, 1000, 1939, 3004, 995, 759, 1370, 4440, 4083, 2425, 4475, 1674, 760, 1034, 834, 187, 2295, 570, 1624, 1060, 1423, 879, 2806, 1935, 3391, 2868, 2175, 4443, 1535, 1786, 583, 4059, 1902, 2470, 3164, 910, 1551, 1489, 160, 3611, 2458, 3093, 4, 1093, 82, 2067, 4066, 3021, 4202, 2284, 1169, 161, 2913, 828, 2038, 870, 2501, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4680, 4681, 4682, 4683, 4684, 4685, 4686, 4687, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697, 4698, 4699, 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759, 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779, 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799, 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939, 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999]
Pseudo-Label-v1 2013 with iteration pseudo labels
------ Training epochs: 0 ------
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
[train][0  ] lloss: 2.41964	uloss: N/A	lacc: 7.031%	uacc: N/A
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
>>>[train] lloss: 28.00306	uloss: N/A	lacc: 34.323%	uacc: N/A
------ Testing epochs: 0 ------
[test][0  ] lloss: 2.76893	lacc: 21.094%
>>>[test] lloss: 21.13312	lacc: 20.500%
------ Training epochs: 1 ------
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
[train][0  ] lloss: 1.61383	uloss: N/A	lacc: 39.062%	uacc: N/A
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
>>>[train] lloss: 24.07225	uloss: N/A	lacc: 40.833%	uacc: N/A
------ Testing epochs: 1 ------
[test][0  ] lloss: 1.78894	lacc: 32.031%
>>>[test] lloss: 15.08900	lacc: 31.500%
------ Training epochs: 2 ------
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
[train][0  ] lloss: 1.43335	uloss: N/A	lacc: 42.969%	uacc: N/A
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
>>>[train] lloss: 22.24519	uloss: N/A	lacc: 44.948%	uacc: N/A
------ Testing epochs: 2 ------
[test][0  ] lloss: 1.82144	lacc: 32.812%
>>>[test] lloss: 14.69653	lacc: 30.500%
------ Training epochs: 3 ------
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
[train][0  ] lloss: 1.43592	uloss: N/A	lacc: 46.094%	uacc: N/A
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
>>>[train] lloss: 20.57912	uloss: N/A	lacc: 49.635%	uacc: N/A
------ Testing epochs: 3 ------
[test][0  ] lloss: 1.70239	lacc: 37.500%
>>>[test] lloss: 14.12043	lacc: 33.400%
------ Training epochs: 4 ------
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
[train][0  ] lloss: 1.36906	uloss: N/A	lacc: 50.000%	uacc: N/A
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
outputs[umask]:tensor([], device='cuda:0', size=(0, 10), grad_fn=<IndexBackward0>)
iter_unlab_pslab[umask]:tensor([], device='cuda:0', dtype=torch.int64)
tensor(nan, device='cuda:0', grad_fn=<NllLossBackward0>)
>>>[train] lloss: 20.12823	uloss: N/A	lacc: 50.781%	uacc: N/A
------ Testing epochs: 4 ------
[test][0  ] lloss: 1.78186	lacc: 32.031%
>>>[test] lloss: 14.42548	lacc: 31.100%
------ Training epochs: 5 ------
